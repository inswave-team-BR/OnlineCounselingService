<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.kosa.visang.domain.contract.repository.ContractMapper">
    <resultMap id="ContractResultMap" type="kr.or.kosa.visang.domain.contract.model.Contract">
        <id column="contract_id" property="contractId" jdbcType="NUMERIC"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="created_at" property="createdAt" jdbcType="VARCHAR"/>
        <result column="contract_time" property="contractTime" jdbcType="VARCHAR"/>
        <result column="agent_id" property="agentId" jdbcType="VARCHAR"/>
        <result column="client_id" property="clientId" jdbcType="VARCHAR"/>
        <result column="contract_template_id" property="templateId" jdbcType="VARCHAR"/>
        <result column="memo" property="memo" jdbcType="CLOB"/>
    </resultMap>

    <!-- 모든 계약 조회 -->
    <select id="selectAllContracts" resultMap="ContractResultMap">
        SELECT <include refid="baseColumns" />,
               TO_CHAR(created_at, 'YYYY-MM-DD') as created_at,
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
        FROM contract
        ORDER BY created_at DESC
    </select>

    <select id="selectMonthlyScheduleByAgentId" resultMap="ContractResultMap">
        SELECT contract_id, status, TO_CHAR(created_at, 'YYYY-MM-DD') as created_at, 
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time, 
               client_id, agent_id, memo
        FROM contract
        WHERE agent_id = #{id}
          AND contract_time BETWEEN
            TO_DATE(#{year} || '-'|| LPAD(#{month}, 2, '0'), 'YYYY-MM')
            AND LAST_DAY(TO_DATE(#{year}|| '-'|| LPAD(#{month}, 2, '0'), 'YYYY-MM')) + (1 - 1/86400)
        ORDER BY contract_time
    </select>

    <!-- 계약 기본 컬럼 -->
    <sql id="baseColumns">
        contract_id, status, client_id, agent_id, memo
    </sql>

    <!-- 계약 조회 -->
    <select id="selectContractById" resultMap="ContractResultMap">
        SELECT <include refid="baseColumns" />,
               TO_CHAR(created_at, 'YYYY-MM-DD') as created_at,
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
        FROM contract
        WHERE contract_id = #{contractId}
    </select>

    <!-- 고객 ID로 계약 목록 조회 -->
    <select id="selectContractsByClientId" resultMap="ContractResultMap">
        SELECT <include refid="baseColumns" />,
               TO_CHAR(created_at, 'YYYY-MM-DD') as created_at,
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
        FROM contract
        WHERE client_id = #{clientId}
        ORDER BY created_at DESC
    </select>

    <!-- 상담사 ID로 계약 목록 조회 -->
    <select id="selectContractsByAgentId" resultMap="ContractResultMap">
        SELECT <include refid="baseColumns" />,
               TO_CHAR(created_at, 'YYYY-MM-DD') as created_at,
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
        FROM contract
        WHERE agent_id = #{agentId}
        ORDER BY created_at DESC
    </select>

    <!-- 계약 상태별 조회 -->
    <select id="selectContractsByStatus" resultMap="ContractResultMap">
        SELECT <include refid="baseColumns" />,
               TO_CHAR(created_at, 'YYYY-MM-DD') as created_at,
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
        FROM contract
        WHERE status = #{status}
        ORDER BY created_at DESC
    </select>

    <!-- 계약 추가 - 순차적인 ID 사용 -->
    <insert id="insertContract" parameterType="kr.or.kosa.visang.domain.contract.model.Contract">
        <selectKey keyProperty="contractId" resultType="long" order="BEFORE">
            SELECT NVL(MAX(contract_id), 0) + 1 FROM contract
        </selectKey>
        INSERT INTO contract (
            contract_id, status, created_at, client_id, agent_id, memo
        ) VALUES (
            #{contractId}, #{status}, TO_DATE(#{createdAt}, 'YYYY-MM-DD HH24:MI:SS'), #{clientId}, #{agentId}, #{memo}
        )
    </insert>

    <!-- 계약 상태 업데이트 -->
    <update id="updateContractStatus">
        UPDATE contract
        SET status = #{param2}
        WHERE contract_id = #{param1}
    </update>

    <!-- 계약 메모 업데이트 -->
    <update id="updateContractMemo">
        UPDATE contract
        SET memo = #{param2}
        WHERE contract_id = #{param1}
    </update>


</mapper>