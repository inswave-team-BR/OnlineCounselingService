<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="kr.or.kosa.visang.domain.contract.repository.ContractMapper">

	<resultMap id="contractResultMap"
		type="kr.or.kosa.visang.domain.contract.model.Contract">
		<result column="contract_id" property="contractId" />
		<result column="status" property="status" />
		<result column="created_at" property="createdAt" />
		<result column="contract_time" property="contractTime" />
		<result column="client_id" property="clientId" />
		<result column="agent_id" property="agentId" />
		<result column="contract_template_id"
			property="contractTemplateId" />
		<result column="memo" property="memo" />
	</resultMap>

	<resultMap id="contractListResultMap" type="kr.or.kosa.visang.domain.contract.model.ContractListDTO">
		<id column="contract_id" property="contractId" />
		<result column="company_id" property="companyId" />
		<result column="status" property="status" />
		<result column="contract_time" property="contractTime" />
		<result column="client_id" property="clientId" />
		<result column="client_name" property="clientName" />
		<result column="agent_id" property="agentId" />
		<result column="agent_name" property="agentName" />
		<result column="contract_template_id" property="contractTemplateId" />
		<result column="contract_name" property="contractTemplateName" />
	</resultMap>

	<resultMap id="contractDetailResultMap" type="kr.or.kosa.visang.domain.contract.model.ContractDetail">
		<id column="contract_id" property="contractId" />
		<result column="status" property="status" />
		<result column="created_at" property="createdAt" />
		<result column="contract_time" property="contractTime" />
		<result column="client_id" property="clientId" />
		<result column="agent_id" property="agentId" />
		<result column="memo" property="memo" />
		<result column="client_name" property="clientName" />
		<result column="client_email" property="clientEmail" />
		<result column="client_phone_number" property="clientPhoneNumber" />
		<result column="client_address" property="clientAddress" />
		<result column="agent_name" property="agentName" />
		<result column="agent_email" property="agentEmail" />
		<result column="agent_phone_number" property="agentPhoneNumber" />
		<result column="agent_address" property="agentAddress" />
		<result column="client_profile_image_url" property="clientProfileImageUrl" />
		<result column="agent_profile_image_url" property="agentProfileImageUrl" />
		<result column="contract_template_id" property="contractTemplateId" />
		<result column="contract_name" property="contractName" />
	</resultMap>

    <resultMap id="ContractResultMap" type="kr.or.kosa.visang.domain.contract.model.Contract">
        <id column="contract_id" property="contractId" jdbcType="NUMERIC"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="created_at" property="createdAt" jdbcType="VARCHAR"/>
        <result column="contract_time" property="contractTime" jdbcType="VARCHAR"/>
        <result column="agent_id" property="agentId" jdbcType="VARCHAR"/>
        <result column="client_id" property="clientId" jdbcType="VARCHAR"/>
        <result column="contract_template_id" property="templateId" jdbcType="VARCHAR"/>
        <result column="memo" property="memo" jdbcType="CLOB"/>
    </resultMap>

	<resultMap id="scheduleResultMap"
		type="kr.or.kosa.visang.domain.contract.model.Schedule">
		<result column="contract_id" property="contractId" />
		<result column="created_at" property="createdAt" />
		<result column="status" property="status" />
		<result column="contract_time" property="contractTime" />
		<result column="client_id" property="clientId" />
		<result column="agent_id" property="agentId" />
		<result column="memo" property="memo" />
		<result column="email" property="email" />
		<result column="name" property="clientName" />
		<result column="phone_number" property="phoneNumber" />

		<result column="time" property="time" />
		<result column="invitation_code" property="invitationCode" />
	</resultMap>

	<insert id="insertSchedule"
		parameterType="kr.or.kosa.visang.domain.contract.model.Contract">
		<selectKey keyProperty="contractId" order="BEFORE"
			resultType="long">
			SELECT contract_seq.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO contract
		(contract_id,
		status,
		created_at,
		contract_time,
		client_id,
		agent_id,
		memo)
		VALUES
		(
		#{contractId, jdbcType=NUMERIC},
		#{status, jdbcType=VARCHAR},
		#{createdAt, jdbcType=TIMESTAMP},
		#{contractTime, jdbcType=TIMESTAMP},
		#{clientId, jdbcType=NUMERIC},
		#{agentId, jdbcType=NUMERIC},
		#{memo, jdbcType=CLOB}
		)
	</insert>

	<select id="selectSchedulesByAgent" parameterType="long"
		resultMap="scheduleResultMap">
		SELECT
		c.contract_id,
		c.created_at,
		c.status,
		c.contract_time,
		c.client_id,
		c.agent_id,
		c.memo,
		cl.email,
		cl.name,
		cl.phone_number
		FROM
		contract c
		JOIN client cl ON c.client_id = cl.client_id
		WHERE c.agent_id
		= #{agentId}
		ORDER BY c.contract_time
	</select>

	<select id="countByClientAndTime" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM contract
		WHERE client_id = #{clientId}
		AND contract_time = #{contractTime}
	</select>

	<select id="countByAgentAndTime" resultType="int"
		parameterType="map">
		SELECT COUNT(*)
		FROM contract
		WHERE agent_id = #{agentId}
		AND contract_time = #{contractTime}
	</select>


	<select id="countByClientAndTimeExcept" resultType="int">
		SELECT
		COUNT(*)
		FROM contract
		WHERE client_id = #{clientId}
		AND contract_time =
		#{contractTime}
		AND contract_id != #{excludeContractId}
	</select>

	<select id="countByAgentAndTimeExcept" resultType="int">
		SELECT
		COUNT(*)
		FROM contract
		WHERE agent_id = #{agentId}
		AND contract_time =
		#{contractTime}
		AND contract_id != #{excludeContractId}
	</select>

	<update id="updateSchedule">
		UPDATE contract
		SET contract_time = #{contractTime},
		memo = #{memo}
		WHERE contract_id = #{contractId}
	</update>

	<delete id="deleteSchedule" parameterType="long">
		DELETE FROM contract
		WHERE contract_id = #{contractId}
	</delete>


	<select id="findTodayContracts" parameterType="map"
		resultMap="scheduleResultMap">
		SELECT
		c.contract_id,
		c.created_at,
		c.status,
		c.contract_time,
		TO_CHAR(c.contract_time, 'HH24:MI') AS time,
		i.invitation_code,
		cl.client_id,
		cl.name,
		cl.email,
		cl.phone_number
		FROM contract c
		JOIN
		client cl ON c.client_id = cl.client_id
		LEFT JOIN invitation i ON
		i.contract_id = c.contract_id
		WHERE
		TRUNC(c.contract_time) =
		TO_DATE(#{date}, 'YYYY-MM-DD')
		AND c.agent_id =
		#{agentId}
		ORDER BY
		c.contract_time
	</select>

	<select id="findById" parameterType="long"
		resultType="kr.or.kosa.visang.domain.contract.model.Contract">
		SELECT * FROM contract WHERE contract_id = #{contractId}
	</select>

	<!-- 계약 상태별 계약 목록 조회 -->
    <select id="selectContractByStatus" resultMap="contractListResultMap">
        SELECT c.contract_id AS contract_id,
               c.status AS status,
               c.contract_time AS contract_time,
               cl.client_id AS client_id,
               cl.name AS client_name,
               a.agent_id AS agent_id,
               a.name AS agent_name,
               ct.contract_template_id AS contract_template_id,
               ct.contract_name AS contract_name
        FROM contract c
		LEFT JOIN client cl ON c.client_id = cl.client_id
		LEFT JOIN agent a ON c.agent_id = a.agent_id
		LEFT JOIN contract_templates ct ON c.contract_template_id = ct.contract_template_id
        WHERE c.status = #{status} and c.company_id = #{companyId}
        ORDER BY c.contract_time ASC
    </select>

	<!-- 계약 조건 조회-->
	<select id="searchContracts" resultMap="contractListResultMap">
		SELECT
		c.contract_id AS contract_id,
		c.contract_time AS contract_time,
		a.agent_id AS agent_id,
		a.name AS agent_name,
		cl.client_id AS client_id,
		cl.name AS client_name,
		c.status AS status,
		t.contract_template_id AS contract_template_id,
		t.contract_name AS contract_name
		FROM contract c
		LEFT JOIN agent a ON a.agent_id  = c.agent_id
		LEFT JOIN client cl ON cl.client_id = c.client_id
		LEFT JOIN contract_templates t ON c.contract_template_id = t.contract_template_id
		<where>
			c.company_id = #{companyId}
			<if test="contractId != null and contractId != ''">
				AND c.contract_id = #{contractId}
			</if>
			<if test="contractTime != null and contractTime != ''">
				AND TRUNC(c.contract_time, 'MM') = TO_DATE(#{contractTime}, 'YYYY-MM')
			</if>
			<if test="agentId != null and agentId != ''">
				AND c.agent_id = #{agentId}
			</if>
			<if test="clientId != null and clientId != ''">
				AND c.client_id = #{clientId}
			</if>
			<if test="status != null and status != ''">
				AND c.status = #{status}
			</if>
			<if test="contractName != null and contractName != ''">
				AND LOWER(t.contract_name) LIKE '%' || LOWER(#{contractName}) || '%'
			</if>
		</where>
		ORDER BY c.contract_time ASC
	</select>

    <!-- 모든 계약 조회 -->
    <select id="selectAllContracts" resultMap="ContractResultMap">
        SELECT <include refid="baseColumns" />,
               TO_CHAR(created_at, 'YYYY-MM-DD') as created_at,
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
        FROM contract
        ORDER BY created_at DESC
    </select>

    <select id="selectMonthlyScheduleByAgentId" resultMap="ContractResultMap">
        SELECT contract_id, status, TO_CHAR(created_at, 'YYYY-MM-DD') as created_at,
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time,
               client_id, agent_id, memo
        FROM contract
        WHERE agent_id = #{id}
          AND contract_time BETWEEN
            TO_DATE(#{year} || '-'|| LPAD(#{month}, 2, '0'), 'YYYY-MM')
            AND LAST_DAY(TO_DATE(#{year}|| '-'|| LPAD(#{month}, 2, '0'), 'YYYY-MM')) + (1 - 1/86400)
        ORDER BY contract_time
    </select>

    <!-- 계약 기본 컬럼 -->
    <sql id="baseColumns">
        contract_id, status, client_id, agent_id, memo
    </sql>

    <!-- 계약 조회 -->
    <select id="selectContractById" resultMap="ContractResultMap">
        SELECT <include refid="baseColumns" />,
               TO_CHAR(created_at, 'YYYY-MM-DD') as created_at,
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
        FROM contract
        WHERE contract_id = #{contractId}
    </select>

    <!-- 고객 ID로 계약 목록 조회 -->
    <select id="selectContractsByClientId" resultMap="ContractResultMap">
        SELECT <include refid="baseColumns" />,
               TO_CHAR(created_at, 'YYYY-MM-DD') as created_at,
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
        FROM contract
        WHERE client_id = #{clientId}
        ORDER BY created_at DESC
    </select>

    <!-- 상담사 ID로 계약 목록 조회 -->
    <select id="selectContractsByAgentId" resultMap="ContractResultMap">
        SELECT <include refid="baseColumns" />,
               TO_CHAR(created_at, 'YYYY-MM-DD') as created_at,
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
        FROM contract
        WHERE agent_id = #{agentId}
        ORDER BY created_at DESC
    </select>

    <!-- 계약 상태별 조회 -->
    <select id="selectContractsByStatus" resultMap="ContractResultMap">
        SELECT <include refid="baseColumns" />,
               TO_CHAR(created_at, 'YYYY-MM-DD') as created_at,
               TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
        FROM contract
        WHERE status = #{status}
        ORDER BY created_at DESC
    </select>

    <!-- 계약 추가 - 순차적인 ID 사용 -->
    <insert id="insertContract" parameterType="kr.or.kosa.visang.domain.contract.model.Contract">
        <selectKey keyProperty="contractId" resultType="long" order="BEFORE">
            SELECT NVL(MAX(contract_id), 0) + 1 FROM contract
        </selectKey>
        INSERT INTO contract (
            contract_id, status, created_at, client_id, agent_id, memo
        ) VALUES (
            #{contractId}, #{status}, TO_DATE(#{createdAt}, 'YYYY-MM-DD HH24:MI:SS'), #{clientId}, #{agentId}, #{memo}
        )
    </insert>

    <!-- 계약 상태 업데이트 -->
    <update id="updateContractStatus">
        UPDATE contract
        SET status = #{param2}
        WHERE contract_id = #{param1}
    </update>

    <!-- 계약 메모 업데이트 -->
    <update id="updateContractMemo">
        UPDATE contract
        SET memo = #{param2}
        WHERE contract_id = #{param1}
    </update>

	<!-- 계약 상세조회 -->
	<select id="selectContractDetail" resultMap="contractDetailResultMap">
		SELECT
			c.contract_id, c.status, c.created_at, c.contract_time, c.client_id, c.agent_id, c.memo,
			cl.name AS client_name, cl.email AS client_email, cl.phone_number AS client_phone_number, cl.address AS client_address,
			a.name AS agent_name, a.email AS agent_email, a.phone_number AS agent_phone_number, a.address AS agent_address
			, cl.profile_image_url AS client_profile_image_url, a.profile_image_url AS agent_profile_image_url
			, ct.contract_name AS contract_name, ct.contract_template_id AS contract_template_id
		FROM contract c
				 JOIN client cl ON c.client_id = cl.client_id
				 JOIN agent a ON c.agent_id = a.agent_id
				 JOIN contract_templates ct ON c.contract_template_id = ct.contract_template_id
		WHERE c.contract_id = #{contractId}
	</select>
</mapper>