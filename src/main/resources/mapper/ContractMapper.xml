<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.kosa.visang.domain.contract.repository.ContractMapper">

	<resultMap id="ContractResultMap" type="kr.or.kosa.visang.domain.contract.model.Contract">
		<id column="contract_id" property="contractId" jdbcType="NUMERIC"/>
		<result column="status" property="status" jdbcType="VARCHAR"/>
		<result column="created_at" property="createdAt" jdbcType="VARCHAR"/>
		<result column="contract_time" property="contractTime" jdbcType="VARCHAR"/>
		<result column="agent_id" property="agentId" jdbcType="NUMERIC"/>
		<result column="client_id" property="clientId" jdbcType="NUMERIC"/>
		<result column="contract_template_id" property="templateId" jdbcType="VARCHAR"/>
		<result column="memo" property="memo" jdbcType="CLOB"/>
		<result column="client_email" property="clientEmail" jdbcType="VARCHAR"/>
	</resultMap>

	<resultMap id="scheduleResultMap" type="kr.or.kosa.visang.domain.contract.model.Schedule">
		<result column="contract_id" property="contractId" />
		<result column="created_at" property="createdAt" jdbcType="VARCHAR" />
		<result column="status" property="status" />
		<result column="contract_time" property="contractTime" />
		<result column="client_id" property="clientId" />
		<result column="agent_id" property="agentId" />
		<result column="memo" property="memo" />
		<result column="email" property="email" />
		<result column="name" property="clientName" />
		<result column="phone_number" property="phoneNumber" />
		<result column="time" property="time" />
		<result column="invitation_code" property="invitationCode" />
	</resultMap>

	<!-- 계약 기본 컬럼 -->
	<sql id="baseColumns">
		contract_id, status, client_id, agent_id, memo
	</sql>

	<insert id="insertSchedule" parameterType="kr.or.kosa.visang.domain.contract.model.Contract">
		<selectKey keyProperty="contractId" order="BEFORE" resultType="long">
			SELECT contract_seq.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO contract
		(contract_id, status, created_at, contract_time, client_id, agent_id, memo)
		VALUES
		(
		#{contractId, jdbcType=NUMERIC},
		#{status, jdbcType=VARCHAR},
		#{createdAt, jdbcType=VARCHAR},
		#{contractTime, jdbcType=TIMESTAMP},
		#{clientId, jdbcType=NUMERIC},
		#{agentId, jdbcType=NUMERIC},
		#{memo, jdbcType=CLOB}
		)
	</insert>

	<select id="selectSchedulesByAgent" parameterType="long" resultMap="scheduleResultMap">
		SELECT
		c.contract_id,
		c.created_at,
		c.status,
		c.contract_time,
		c.client_id,
		c.agent_id,
		c.memo,
		cl.email,
		cl.name,
		cl.phone_number
		FROM
		contract c
		JOIN client cl ON c.client_id = cl.client_id
		WHERE c.agent_id = #{agentId}
		ORDER BY c.contract_time
	</select>

	<select id="countByClientAndTime" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM contract
		WHERE client_id = #{clientId}
		AND contract_time = #{contractTime}
	</select>

	<select id="countByAgentAndTime" resultType="int" parameterType="map">
		SELECT COUNT(*)
		FROM contract
		WHERE agent_id = #{agentId}
		AND contract_time = #{contractTime}
	</select>

	<select id="countByClientAndTimeExcept" resultType="int">
		SELECT COUNT(*)
		FROM contract
		WHERE client_id = #{clientId}
		AND contract_time = #{contractTime}
		AND contract_id != #{excludeContractId}
	</select>

	<select id="countByAgentAndTimeExcept" resultType="int">
		SELECT COUNT(*)
		FROM contract
		WHERE agent_id = #{agentId}
		AND contract_time = #{contractTime}
		AND contract_id != #{excludeContractId}
	</select>

	<update id="updateSchedule">
		UPDATE contract
		SET contract_time = #{contractTime},
		memo = #{memo}
		WHERE contract_id = #{contractId}
	</update>

	<delete id="deleteSchedule" parameterType="long">
		DELETE FROM contract
		WHERE contract_id = #{contractId}
	</delete>

	<select id="findTodayContracts" parameterType="map" resultMap="scheduleResultMap">
		SELECT
		c.contract_id,
		c.created_at,
		c.status,
		c.contract_time,
		TO_CHAR(c.contract_time, 'HH24:MI') AS time,
		i.invitation_code,
		cl.client_id,
		cl.name,
		cl.email,
		cl.phone_number
		FROM contract c
		JOIN client cl ON c.client_id = cl.client_id
		LEFT JOIN invitation i ON i.contract_id = c.contract_id
		WHERE TRUNC(c.contract_time) = TO_DATE(#{date}, 'YYYY-MM-DD')
		AND c.agent_id = #{agentId}
		ORDER BY c.contract_time
	</select>

	<select id="findById" parameterType="long" resultType="kr.or.kosa.visang.domain.contract.model.Contract">
		SELECT * FROM contract WHERE contract_id = #{contractId}
	</select>

	<select id="selectContractByStatus" resultMap="ContractResultMap">
		SELECT *
		FROM contract
		WHERE status = #{status} and company_id = #{companyId}
		ORDER BY contract_time DESC
	</select>

	<!-- 모든 계약 조회 -->
	<select id="selectAllContracts" resultMap="ContractResultMap">
		SELECT <include refid="baseColumns" />, created_at,
			   TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
		FROM contract
		ORDER BY created_at DESC
	</select>

	<select id="selectMonthlyScheduleByAgentId" resultMap="ContractResultMap">
		SELECT contract_id, status, created_at,
			   TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time,
			   client_id, agent_id, memo
		FROM contract
		WHERE agent_id = #{id}
		  AND contract_time BETWEEN
			TO_DATE(#{year} || '-'|| LPAD(#{month}, 2, '0'), 'YYYY-MM')
			AND LAST_DAY(TO_DATE(#{year}|| '-'|| LPAD(#{month}, 2, '0'), 'YYYY-MM')) + (1 - 1/86400)
		ORDER BY contract_time
	</select>

	<!-- 계약 조회 - 고객 이메일 포함 -->
	<select id="selectContractById" resultMap="ContractResultMap">
		SELECT c.contract_id, c.status, c.created_at, c.client_id, c.agent_id, c.memo,
			   TO_CHAR(c.contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time,
			   cl.email as client_email
		FROM contract c
		LEFT JOIN client cl ON c.client_id = cl.client_id
		WHERE c.contract_id = #{contractId}
	</select>

	<!-- 고객 ID로 계약 목록 조회 -->
	<select id="selectContractsByClientId" resultMap="ContractResultMap">
		SELECT <include refid="baseColumns" />, created_at,
			   TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
		FROM contract
		WHERE client_id = #{clientId}
		ORDER BY created_at DESC
	</select>

	<!-- 상담사 ID로 계약 목록 조회 -->
	<select id="selectContractsByAgentId" resultMap="ContractResultMap">
		SELECT <include refid="baseColumns" />, created_at,
			   TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
		FROM contract
		WHERE agent_id = #{agentId}
		ORDER BY created_at DESC
	</select>

	<!-- 계약 상태별 조회 -->
	<select id="selectContractsByStatus" resultMap="ContractResultMap">
		SELECT <include refid="baseColumns" />, created_at,
			   TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
		FROM contract
		WHERE status = #{status}
		ORDER BY created_at DESC
	</select>

	<!-- 계약 추가 - Oracle 시퀀스 사용 -->
	<insert id="insertContract" parameterType="kr.or.kosa.visang.domain.contract.model.Contract">
		<selectKey keyProperty="contractId" resultType="long" order="BEFORE">
			SELECT contract_seq.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO contract (
			contract_id, status, created_at, client_id, agent_id, memo
		) VALUES (
			#{contractId}, 
			#{status}, 
			#{createdAt, jdbcType=VARCHAR}, 
			#{clientId, jdbcType=NUMERIC}, 
			#{agentId, jdbcType=NUMERIC}, 
			#{memo, jdbcType=CLOB}
		)
	</insert>

	<!-- 계약 상태 업데이트 -->
	<update id="updateContractStatus">
		UPDATE contract
		SET status = #{param2, jdbcType=VARCHAR}
		WHERE contract_id = #{param1}
	</update>

	<!-- 계약 메모 업데이트 -->
	<update id="updateContractMemo">
		UPDATE contract
		SET memo = #{param2, jdbcType=CLOB}
		WHERE contract_id = #{param1}
	</update>

	<!-- 계약의 상담원 ID 업데이트 -->
	<update id="updateContractAgentId">
		UPDATE contract
		SET agent_id = #{agentId, jdbcType=NUMERIC}
		WHERE contract_id = #{contractId}
	</update>

	<!-- 계약의 고객 ID 업데이트 -->
	<update id="updateContractClientId">
		UPDATE contract
		SET client_id = #{clientId, jdbcType=NUMERIC}
		WHERE contract_id = #{contractId}
	</update>

	<!-- 세션 ID로 계약 조회 - Oracle 문법 사용 -->
	<select id="selectContractBySessionId" resultMap="ContractResultMap">
		SELECT * FROM (
			SELECT <include refid="baseColumns" />, created_at,
				   TO_CHAR(contract_time, 'YYYY-MM-DD HH24:MI:SS') as contract_time
			FROM contract
			WHERE memo LIKE '%SessionId: ' || #{sessionId} || '%'
			OR contract_id = (
				SELECT MAX(contract_id)
				FROM contract
				WHERE status = '진행중'
			)
			ORDER BY contract_id DESC
		) WHERE ROWNUM &lt;= 1
	</select>

</mapper>